/**
 * generated by Xtext 2.12.0
 */
package org.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.services.TripModelLanguageTextGrammarAccess;
import trip_model.Service;
import trip_model.Trip;
import trip_model.TripModel;
import trip_model.location;

@SuppressWarnings("all")
public class TripModelLanguageTextFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private TripModelLanguageTextGrammarAccess _tripModelLanguageTextGrammarAccess;
  
  protected void _format(final TripModel tripModel, @Extension final IFormattableDocument document) {
    EList<Trip> _trip = tripModel.getTrip();
    for (final Trip trip : _trip) {
      document.<Trip>format(trip);
    }
    EList<location> _location = tripModel.getLocation();
    for (final location location : _location) {
      document.<trip_model.location>format(location);
    }
  }
  
  protected void _format(final Trip trip, @Extension final IFormattableDocument document) {
    EList<Service> _service = trip.getService();
    for (final Service service : _service) {
      document.<Service>format(service);
    }
  }
  
  public void format(final Object trip, final IFormattableDocument document) {
    if (trip instanceof XtextResource) {
      _format((XtextResource)trip, document);
      return;
    } else if (trip instanceof Trip) {
      _format((Trip)trip, document);
      return;
    } else if (trip instanceof TripModel) {
      _format((TripModel)trip, document);
      return;
    } else if (trip instanceof EObject) {
      _format((EObject)trip, document);
      return;
    } else if (trip == null) {
      _format((Void)null, document);
      return;
    } else if (trip != null) {
      _format(trip, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(trip, document).toString());
    }
  }
}
