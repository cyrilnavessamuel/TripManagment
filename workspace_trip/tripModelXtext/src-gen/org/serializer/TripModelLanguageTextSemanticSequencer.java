/*
 * generated by Xtext 2.12.0
 */
package org.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.services.TripModelLanguageTextGrammarAccess;
import trip_model.OtherService;
import trip_model.Service;
import trip_model.TravelService;
import trip_model.Trip;
import trip_model.TripModel;
import trip_model.Trip_modelPackage;
import trip_model.location;

@SuppressWarnings("all")
public class TripModelLanguageTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TripModelLanguageTextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Trip_modelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Trip_modelPackage.OTHER_SERVICE:
				sequence_OtherService(context, (OtherService) semanticObject); 
				return; 
			case Trip_modelPackage.SERVICE:
				sequence_Service_Impl(context, (Service) semanticObject); 
				return; 
			case Trip_modelPackage.TRAVEL_SERVICE:
				sequence_TravelService(context, (TravelService) semanticObject); 
				return; 
			case Trip_modelPackage.TRIP:
				sequence_Trip(context, (Trip) semanticObject); 
				return; 
			case Trip_modelPackage.TRIP_MODEL:
				sequence_TripModel(context, (TripModel) semanticObject); 
				return; 
			case Trip_modelPackage.LOCATION:
				sequence_location(context, (location) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Service returns OtherService
	 *     OtherService returns OtherService
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         Cost=EFloat? 
	 *         Duration=EInt? 
	 *         Rating=EInt? 
	 *         Type=EString? 
	 *         location=[location|EString]
	 *     )
	 */
	protected void sequence_OtherService(ISerializationContext context, OtherService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Service
	 *     Service_Impl returns Service
	 *
	 * Constraint:
	 *     (name=EString Cost=EFloat? Duration=EInt? Rating=EInt? Type=EString?)
	 */
	protected void sequence_Service_Impl(ISerializationContext context, Service semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns TravelService
	 *     TravelService returns TravelService
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         Cost=EFloat? 
	 *         Duration=EInt? 
	 *         Rating=EInt? 
	 *         Type=EString? 
	 *         source=[location|EString] 
	 *         destination=[location|EString]
	 *     )
	 */
	protected void sequence_TravelService(ISerializationContext context, TravelService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TripModel returns TripModel
	 *
	 * Constraint:
	 *     ((trip+=Trip trip+=Trip*)? (location+=location location+=location*)?)
	 */
	protected void sequence_TripModel(ISerializationContext context, TripModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Trip returns Trip
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         End=EDate? 
	 *         Start=EDate? 
	 *         source=[location|EString] 
	 *         destination=[location|EString] 
	 *         (service+=Service service+=Service*)?
	 *     )
	 */
	protected void sequence_Trip(ISerializationContext context, Trip semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     location returns location
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_location(ISerializationContext context, location semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Trip_modelPackage.Literals.LOCATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Trip_modelPackage.Literals.LOCATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLocationAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
